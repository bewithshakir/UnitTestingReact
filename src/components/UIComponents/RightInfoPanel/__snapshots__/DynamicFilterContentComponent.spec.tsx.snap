// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rendering of Dynamic filter component Dynamic filter component snapshot testing with combined inputs 1`] = `
<div
  className="cust_filter_panel_content"
>
  <ContextProvider
    value={
      Object {
        "dirty": false,
        "errors": Object {},
        "getFieldHelpers": [Function],
        "getFieldMeta": [Function],
        "getFieldProps": [Function],
        "handleBlur": [Function],
        "handleChange": [Function],
        "handleReset": [Function],
        "handleSubmit": [Function],
        "initialErrors": Object {},
        "initialStatus": undefined,
        "initialTouched": Object {},
        "initialValues": Object {
          "city": Array [],
          "date": Array [
            null,
            null,
          ],
          "paymentType": Array [],
          "state": Array [],
        },
        "isSubmitting": false,
        "isValid": true,
        "isValidating": false,
        "registerField": [Function],
        "resetForm": [Function],
        "setErrors": [Function],
        "setFieldError": [Function],
        "setFieldTouched": [Function],
        "setFieldValue": [Function],
        "setFormikState": [Function],
        "setStatus": [Function],
        "setSubmitting": [Function],
        "setTouched": [Function],
        "setValues": [Function],
        "status": undefined,
        "submitCount": 0,
        "submitForm": [Function],
        "touched": Object {},
        "unregisterField": [Function],
        "validateField": [Function],
        "validateForm": [Function],
        "validateOnBlur": true,
        "validateOnChange": true,
        "validateOnMount": false,
        "values": Object {
          "city": Array [],
          "date": Array [
            null,
            null,
          ],
          "paymentType": Array [],
          "state": Array [],
        },
      }
    }
  >
    <form
      onReset={[Function]}
      onSubmit={[Function]}
    >
      <ForwardRef(Grid)
        className="cust_filter_parent_grid"
        container={true}
        spacing={2}
      >
        <ForwardRef(Grid)
          columnSpacing={2}
          container={true}
          item={true}
          key="date"
          xs={12}
        >
          <ForwardRef(Grid)
            className="cust_filter_date_label_grid"
            item={true}
            xs={12}
          >
            PERIOD
          </ForwardRef(Grid)>
          <ForwardRef(Grid)
            container={true}
            item={true}
            spacing="2"
            xs={12}
          >
            <DatePickerInput
              dateRangeValue={
                Array [
                  null,
                  null,
                ]
              }
              error={false}
              id="cust-filter-date-range"
              name="date"
              onDateRangeChange={[Function]}
              placeholder={
                Object {
                  "end": "customer-filter-panel.to date",
                  "start": "customer-filter-panel.from date",
                }
              }
              required={true}
              type="date-range"
            />
          </ForwardRef(Grid)>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          key="state"
          xs={12}
        >
          <SelectInput
            field={
              Object {
                "fieldType": "select",
                "initialValue": Array [],
                "label": "customer-filter-panel.state",
                "name": "state",
                "optionAPIResponseKey": "states",
                "optionUrlKey": "customerFilter",
              }
            }
            formik={
              Object {
                "dirty": false,
                "errors": Object {},
                "getFieldHelpers": [Function],
                "getFieldMeta": [Function],
                "getFieldProps": [Function],
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialErrors": Object {},
                "initialStatus": undefined,
                "initialTouched": Object {},
                "initialValues": Object {
                  "city": Array [],
                  "date": Array [
                    null,
                    null,
                  ],
                  "paymentType": Array [],
                  "state": Array [],
                },
                "isSubmitting": false,
                "isValid": true,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "status": undefined,
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validateOnMount": false,
                "values": Object {
                  "city": Array [],
                  "date": Array [
                    null,
                    null,
                  ],
                  "paymentType": Array [],
                  "state": Array [],
                },
              }
            }
            handleSelect={[Function]}
          />
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          key="city"
          xs={12}
        >
          <SelectInput
            field={
              Object {
                "fieldType": "select",
                "initialValue": Array [],
                "label": "customer-filter-panel.city",
                "name": "city",
                "optionAPIResponseKey": "cities",
                "optionUrlKey": "customerFilter",
              }
            }
            formik={
              Object {
                "dirty": false,
                "errors": Object {},
                "getFieldHelpers": [Function],
                "getFieldMeta": [Function],
                "getFieldProps": [Function],
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialErrors": Object {},
                "initialStatus": undefined,
                "initialTouched": Object {},
                "initialValues": Object {
                  "city": Array [],
                  "date": Array [
                    null,
                    null,
                  ],
                  "paymentType": Array [],
                  "state": Array [],
                },
                "isSubmitting": false,
                "isValid": true,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "status": undefined,
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validateOnMount": false,
                "values": Object {
                  "city": Array [],
                  "date": Array [
                    null,
                    null,
                  ],
                  "paymentType": Array [],
                  "state": Array [],
                },
              }
            }
            handleSelect={[Function]}
          />
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          key="paymentType"
          xs={12}
        >
          <SelectInput
            field={
              Object {
                "fieldType": "select",
                "initialValue": Array [],
                "label": "customer-filter-panel.settlement type",
                "name": "paymentType",
                "optionAPIResponseKey": "settlementType",
                "optionUrlKey": "customerFilter",
              }
            }
            formik={
              Object {
                "dirty": false,
                "errors": Object {},
                "getFieldHelpers": [Function],
                "getFieldMeta": [Function],
                "getFieldProps": [Function],
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialErrors": Object {},
                "initialStatus": undefined,
                "initialTouched": Object {},
                "initialValues": Object {
                  "city": Array [],
                  "date": Array [
                    null,
                    null,
                  ],
                  "paymentType": Array [],
                  "state": Array [],
                },
                "isSubmitting": false,
                "isValid": true,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "status": undefined,
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validateOnMount": false,
                "values": Object {
                  "city": Array [],
                  "date": Array [
                    null,
                    null,
                  ],
                  "paymentType": Array [],
                  "state": Array [],
                },
              }
            }
            handleSelect={[Function]}
          />
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
      <div
        className="cust_filter_buttons_container"
      >
        <Styled(Button)
          aria-label="customer-filter-panel.buttons.clear all"
          type="reset"
          types="cancel"
        >
          customer-filter-panel.buttons.clear all
        </Styled(Button)>
        <Styled(Button)
          aria-label="customer-filter-panel.buttons.apply"
          disabled={true}
          type="submit"
          types="save"
        >
          customer-filter-panel.buttons.apply
        </Styled(Button)>
      </div>
    </form>
  </ContextProvider>
</div>
`;

exports[`Rendering of Dynamic filter component Dynamic filter component snapshot testing with daterange 1`] = `
<div
  className="cust_filter_panel_content"
>
  <ContextProvider
    value={
      Object {
        "dirty": false,
        "errors": Object {},
        "getFieldHelpers": [Function],
        "getFieldMeta": [Function],
        "getFieldProps": [Function],
        "handleBlur": [Function],
        "handleChange": [Function],
        "handleReset": [Function],
        "handleSubmit": [Function],
        "initialErrors": Object {},
        "initialStatus": undefined,
        "initialTouched": Object {},
        "initialValues": Object {
          "date": Array [
            null,
            null,
          ],
        },
        "isSubmitting": false,
        "isValid": true,
        "isValidating": false,
        "registerField": [Function],
        "resetForm": [Function],
        "setErrors": [Function],
        "setFieldError": [Function],
        "setFieldTouched": [Function],
        "setFieldValue": [Function],
        "setFormikState": [Function],
        "setStatus": [Function],
        "setSubmitting": [Function],
        "setTouched": [Function],
        "setValues": [Function],
        "status": undefined,
        "submitCount": 0,
        "submitForm": [Function],
        "touched": Object {},
        "unregisterField": [Function],
        "validateField": [Function],
        "validateForm": [Function],
        "validateOnBlur": true,
        "validateOnChange": true,
        "validateOnMount": false,
        "values": Object {
          "date": Array [
            null,
            null,
          ],
        },
      }
    }
  >
    <form
      onReset={[Function]}
      onSubmit={[Function]}
    >
      <ForwardRef(Grid)
        className="cust_filter_parent_grid"
        container={true}
        spacing={2}
      >
        <ForwardRef(Grid)
          columnSpacing={2}
          container={true}
          item={true}
          key="date"
          xs={12}
        >
          <ForwardRef(Grid)
            className="cust_filter_date_label_grid"
            item={true}
            xs={12}
          >
            PERIOD
          </ForwardRef(Grid)>
          <ForwardRef(Grid)
            container={true}
            item={true}
            spacing="2"
            xs={12}
          >
            <DatePickerInput
              dateRangeValue={
                Array [
                  null,
                  null,
                ]
              }
              error={false}
              id="cust-filter-date-range"
              name="date"
              onDateRangeChange={[Function]}
              placeholder={
                Object {
                  "end": "customer-filter-panel.to date",
                  "start": "customer-filter-panel.from date",
                }
              }
              required={true}
              type="date-range"
            />
          </ForwardRef(Grid)>
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
      <div
        className="cust_filter_buttons_container"
      >
        <Styled(Button)
          aria-label="customer-filter-panel.buttons.clear all"
          type="reset"
          types="cancel"
        >
          customer-filter-panel.buttons.clear all
        </Styled(Button)>
        <Styled(Button)
          aria-label="customer-filter-panel.buttons.apply"
          disabled={true}
          type="submit"
          types="save"
        >
          customer-filter-panel.buttons.apply
        </Styled(Button)>
      </div>
    </form>
  </ContextProvider>
</div>
`;

exports[`Rendering of Dynamic filter component Dynamic filter component snapshot testing with dropdown 1`] = `
<div
  className="cust_filter_panel_content"
>
  <ContextProvider
    value={
      Object {
        "dirty": false,
        "errors": Object {},
        "getFieldHelpers": [Function],
        "getFieldMeta": [Function],
        "getFieldProps": [Function],
        "handleBlur": [Function],
        "handleChange": [Function],
        "handleReset": [Function],
        "handleSubmit": [Function],
        "initialErrors": Object {},
        "initialStatus": undefined,
        "initialTouched": Object {},
        "initialValues": Object {
          "testText": Array [],
        },
        "isSubmitting": false,
        "isValid": true,
        "isValidating": false,
        "registerField": [Function],
        "resetForm": [Function],
        "setErrors": [Function],
        "setFieldError": [Function],
        "setFieldTouched": [Function],
        "setFieldValue": [Function],
        "setFormikState": [Function],
        "setStatus": [Function],
        "setSubmitting": [Function],
        "setTouched": [Function],
        "setValues": [Function],
        "status": undefined,
        "submitCount": 0,
        "submitForm": [Function],
        "touched": Object {},
        "unregisterField": [Function],
        "validateField": [Function],
        "validateForm": [Function],
        "validateOnBlur": true,
        "validateOnChange": true,
        "validateOnMount": false,
        "values": Object {
          "testText": Array [],
        },
      }
    }
  >
    <form
      onReset={[Function]}
      onSubmit={[Function]}
    >
      <ForwardRef(Grid)
        className="cust_filter_parent_grid"
        container={true}
        spacing={2}
      >
        <ForwardRef(Grid)
          item={true}
          key="testText"
          xs={12}
        >
          <MultiSelect
            error={false}
            id="testText"
            items={
              Array [
                Object {
                  "label": "option1",
                  "value": "option1",
                },
                Object {
                  "label": "option2",
                  "value": "option2",
                },
              ]
            }
            label="dummy text"
            loadingMessage="Loading..."
            name="testText"
            noOptionsMessage="No Options found"
            onChange={[Function]}
            placeholder=""
            required={false}
            value={Array []}
          />
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
      <div
        className="cust_filter_buttons_container"
      >
        <Styled(Button)
          aria-label="customer-filter-panel.buttons.clear all"
          type="reset"
          types="cancel"
        >
          customer-filter-panel.buttons.clear all
        </Styled(Button)>
        <Styled(Button)
          aria-label="customer-filter-panel.buttons.apply"
          disabled={true}
          type="submit"
          types="save"
        >
          customer-filter-panel.buttons.apply
        </Styled(Button)>
      </div>
    </form>
  </ContextProvider>
</div>
`;

exports[`Rendering of Dynamic filter component Dynamic filter component snapshot testing with textBox 1`] = `
<div
  className="cust_filter_panel_content"
>
  <ContextProvider
    value={
      Object {
        "dirty": false,
        "errors": Object {},
        "getFieldHelpers": [Function],
        "getFieldMeta": [Function],
        "getFieldProps": [Function],
        "handleBlur": [Function],
        "handleChange": [Function],
        "handleReset": [Function],
        "handleSubmit": [Function],
        "initialErrors": Object {},
        "initialStatus": undefined,
        "initialTouched": Object {},
        "initialValues": Object {
          "testText": "",
        },
        "isSubmitting": false,
        "isValid": true,
        "isValidating": false,
        "registerField": [Function],
        "resetForm": [Function],
        "setErrors": [Function],
        "setFieldError": [Function],
        "setFieldTouched": [Function],
        "setFieldValue": [Function],
        "setFormikState": [Function],
        "setStatus": [Function],
        "setSubmitting": [Function],
        "setTouched": [Function],
        "setValues": [Function],
        "status": undefined,
        "submitCount": 0,
        "submitForm": [Function],
        "touched": Object {},
        "unregisterField": [Function],
        "validateField": [Function],
        "validateForm": [Function],
        "validateOnBlur": true,
        "validateOnChange": true,
        "validateOnMount": false,
        "values": Object {
          "testText": "",
        },
      }
    }
  >
    <form
      onReset={[Function]}
      onSubmit={[Function]}
    >
      <ForwardRef(Grid)
        className="cust_filter_parent_grid"
        container={true}
        spacing={2}
      >
        <ForwardRef(Grid)
          item={true}
          key="testText"
          xs={12}
        >
          <Input
            autoComplete="new-password"
            description=""
            disabled={false}
            error={false}
            id="testText"
            label="dummy text"
            onChange={[Function]}
            required={false}
            type="text"
            value=""
            width="100%"
          />
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
      <div
        className="cust_filter_buttons_container"
      >
        <Styled(Button)
          aria-label="customer-filter-panel.buttons.clear all"
          type="reset"
          types="cancel"
        >
          customer-filter-panel.buttons.clear all
        </Styled(Button)>
        <Styled(Button)
          aria-label="customer-filter-panel.buttons.apply"
          disabled={true}
          type="submit"
          types="save"
        >
          customer-filter-panel.buttons.apply
        </Styled(Button)>
      </div>
    </form>
  </ContextProvider>
</div>
`;
