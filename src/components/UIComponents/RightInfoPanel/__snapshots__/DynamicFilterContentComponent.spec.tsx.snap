// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rendering of Dynamic filter component Dynamic filter component snapshot testing with checkbox 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "getFieldHelpers": [Function],
      "getFieldMeta": [Function],
      "getFieldProps": [Function],
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialErrors": Object {},
      "initialStatus": undefined,
      "initialTouched": Object {},
      "initialValues": Object {
        "multiselect": Array [],
      },
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validateOnMount": false,
      "values": Object {
        "multiselect": Array [],
      },
    }
  }
>
  <form
    className="dynamicForm"
    onReset={[Function]}
    onSubmit={[Function]}
  >
    <ForwardRef(Grid)
      className="sContainer"
      container={true}
      direction="column"
    >
      <ForwardRef(Grid)
        item={true}
        key="multiselect"
        mb={2}
        ml={6}
        mr={6}
        mt={2}
      >
        <ForwardRef(FormControl)
          className="formInput"
        >
          <ForwardRef(InputLabel)
            aria-labelledby="multi checkbox"
            htmlFor="multiselect"
            shrink={true}
          >
            <b>
              multi checkbox
            </b>
          </ForwardRef(InputLabel)>
          <ForwardRef(FormControlLabel)
            className="checkbox-field"
            control={
              <Checkboxes
                checked={false}
                name="multiselect"
                onChange={[Function]}
              />
            }
            key="multiselect-checkbox1"
            label={
              <ForwardRef(Typography)
                className="fw-bold"
                color="var(--Darkgray)"
                variant="h4"
              >
                checkbox1
              </ForwardRef(Typography)>
            }
          />
          <ForwardRef(FormControlLabel)
            className="checkbox-field"
            control={
              <Checkboxes
                checked={false}
                name="multiselect"
                onChange={[Function]}
              />
            }
            key="multiselect-cbbbb2"
            label={
              <ForwardRef(Typography)
                className="fw-bold"
                color="var(--Darkgray)"
                variant="h4"
              >
                cbbbb2
              </ForwardRef(Typography)>
            }
          />
          <ForwardRef(FormControlLabel)
            className="checkbox-field"
            control={
              <Checkboxes
                checked={false}
                name="multiselect"
                onChange={[Function]}
              />
            }
            key="multiselect-cb3"
            label={
              <ForwardRef(Typography)
                className="fw-bold"
                color="var(--Darkgray)"
                variant="h4"
              >
                cb3
              </ForwardRef(Typography)>
            }
          />
        </ForwardRef(FormControl)>
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        className="lastItem"
        container={true}
        direction="row"
        item={true}
        justifyContent="flex-end"
      >
        <ForwardRef(Grid)
          item={true}
          m={2}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.clear all"
            onClick={[Function]}
            type="reset"
            types="cancel"
          >
            right-info-panel.filter.buttons.clear all
          </Styled(Button)>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          m={2}
          mr={6}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.apply"
            disabled={true}
            type="submit"
            types="save"
          >
            right-info-panel.filter.buttons.apply
          </Styled(Button)>
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
    </ForwardRef(Grid)>
  </form>
</ContextProvider>
`;

exports[`Rendering of Dynamic filter component Dynamic filter component snapshot testing with combined inputs 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "getFieldHelpers": [Function],
      "getFieldMeta": [Function],
      "getFieldProps": [Function],
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialErrors": Object {},
      "initialStatus": undefined,
      "initialTouched": Object {},
      "initialValues": Object {
        "city": Array [],
        "date": Array [
          null,
          null,
        ],
        "multiselect": Array [],
        "paymentType": Array [],
        "radiotest": null,
        "state": Array [],
      },
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validateOnMount": false,
      "values": Object {
        "city": Array [],
        "date": Array [
          null,
          null,
        ],
        "multiselect": Array [],
        "paymentType": Array [],
        "radiotest": null,
        "state": Array [],
      },
    }
  }
>
  <form
    className="dynamicForm"
    onReset={[Function]}
    onSubmit={[Function]}
  >
    <ForwardRef(Grid)
      className="sContainer"
      container={true}
      direction="column"
    >
      <ForwardRef(Grid)
        item={true}
        key="date"
        mb={2}
        ml={6}
        mr={6}
        mt={2}
      >
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <ForwardRef(InputLabel)
            aria-labelledby="Date"
            className="filter_label_item"
            htmlFor="date"
            shrink={true}
          >
            <b>
              right-info-panel.filter.period
            </b>
          </ForwardRef(InputLabel)>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          container={true}
          item={true}
          xs={12}
        >
          <DatePickerInput
            dateRangeValue={
              Array [
                null,
                null,
              ]
            }
            error={false}
            id="cust-filter-date-range"
            name="date"
            onDateRangeChange={[Function]}
            placeholder={
              Object {
                "end": "right-info-panel.filter.to date",
                "start": "right-info-panel.filter.from date",
              }
            }
            required={true}
            type="date-range"
          />
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        item={true}
        key="state"
        mb={2}
        ml={6}
        mr={6}
        mt={2}
      >
        <SelectInput
          field={
            Object {
              "fieldType": "select",
              "initialValue": Array [],
              "label": "customer-filter-panel.state",
              "name": "state",
              "optionAPIResponseKey": "states",
              "optionUrlKey": "customerFilter",
            }
          }
          formik={
            Object {
              "dirty": false,
              "errors": Object {},
              "getFieldHelpers": [Function],
              "getFieldMeta": [Function],
              "getFieldProps": [Function],
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialErrors": Object {},
              "initialStatus": undefined,
              "initialTouched": Object {},
              "initialValues": Object {
                "city": Array [],
                "date": Array [
                  null,
                  null,
                ],
                "multiselect": Array [],
                "paymentType": Array [],
                "radiotest": null,
                "state": Array [],
              },
              "isSubmitting": false,
              "isValid": true,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "status": undefined,
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {},
              "unregisterField": [Function],
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validateOnMount": false,
              "values": Object {
                "city": Array [],
                "date": Array [
                  null,
                  null,
                ],
                "multiselect": Array [],
                "paymentType": Array [],
                "radiotest": null,
                "state": Array [],
              },
            }
          }
          handleSelect={[Function]}
        />
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        item={true}
        key="city"
        mb={2}
        ml={6}
        mr={6}
        mt={2}
      >
        <SelectInput
          field={
            Object {
              "fieldType": "select",
              "initialValue": Array [],
              "label": "customer-filter-panel.city",
              "name": "city",
              "optionAPIResponseKey": "cities",
              "optionUrlKey": "customerFilter",
            }
          }
          formik={
            Object {
              "dirty": false,
              "errors": Object {},
              "getFieldHelpers": [Function],
              "getFieldMeta": [Function],
              "getFieldProps": [Function],
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialErrors": Object {},
              "initialStatus": undefined,
              "initialTouched": Object {},
              "initialValues": Object {
                "city": Array [],
                "date": Array [
                  null,
                  null,
                ],
                "multiselect": Array [],
                "paymentType": Array [],
                "radiotest": null,
                "state": Array [],
              },
              "isSubmitting": false,
              "isValid": true,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "status": undefined,
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {},
              "unregisterField": [Function],
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validateOnMount": false,
              "values": Object {
                "city": Array [],
                "date": Array [
                  null,
                  null,
                ],
                "multiselect": Array [],
                "paymentType": Array [],
                "radiotest": null,
                "state": Array [],
              },
            }
          }
          handleSelect={[Function]}
        />
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        item={true}
        key="paymentType"
        mb={2}
        ml={6}
        mr={6}
        mt={2}
      >
        <SelectInput
          field={
            Object {
              "fieldType": "select",
              "initialValue": Array [],
              "label": "customer-filter-panel.settlement type",
              "name": "paymentType",
              "optionAPIResponseKey": "settlementType",
              "optionUrlKey": "customerFilter",
            }
          }
          formik={
            Object {
              "dirty": false,
              "errors": Object {},
              "getFieldHelpers": [Function],
              "getFieldMeta": [Function],
              "getFieldProps": [Function],
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialErrors": Object {},
              "initialStatus": undefined,
              "initialTouched": Object {},
              "initialValues": Object {
                "city": Array [],
                "date": Array [
                  null,
                  null,
                ],
                "multiselect": Array [],
                "paymentType": Array [],
                "radiotest": null,
                "state": Array [],
              },
              "isSubmitting": false,
              "isValid": true,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "status": undefined,
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {},
              "unregisterField": [Function],
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validateOnMount": false,
              "values": Object {
                "city": Array [],
                "date": Array [
                  null,
                  null,
                ],
                "multiselect": Array [],
                "paymentType": Array [],
                "radiotest": null,
                "state": Array [],
              },
            }
          }
          handleSelect={[Function]}
        />
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        item={true}
        key="multiselect"
        mb={2}
        ml={6}
        mr={6}
        mt={2}
      >
        <ForwardRef(FormControl)
          className="formInput"
        >
          <ForwardRef(InputLabel)
            aria-labelledby="multi checkbox"
            htmlFor="multiselect"
            shrink={true}
          >
            <b>
              multi checkbox
            </b>
          </ForwardRef(InputLabel)>
          <ForwardRef(FormControlLabel)
            className="checkbox-field"
            control={
              <Checkboxes
                checked={false}
                name="multiselect"
                onChange={[Function]}
              />
            }
            key="multiselect-checkbox1"
            label={
              <ForwardRef(Typography)
                className="fw-bold"
                color="var(--Darkgray)"
                variant="h4"
              >
                checkbox1
              </ForwardRef(Typography)>
            }
          />
          <ForwardRef(FormControlLabel)
            className="checkbox-field"
            control={
              <Checkboxes
                checked={false}
                name="multiselect"
                onChange={[Function]}
              />
            }
            key="multiselect-cbbbb2"
            label={
              <ForwardRef(Typography)
                className="fw-bold"
                color="var(--Darkgray)"
                variant="h4"
              >
                cbbbb2
              </ForwardRef(Typography)>
            }
          />
          <ForwardRef(FormControlLabel)
            className="checkbox-field"
            control={
              <Checkboxes
                checked={false}
                name="multiselect"
                onChange={[Function]}
              />
            }
            key="multiselect-cb3"
            label={
              <ForwardRef(Typography)
                className="fw-bold"
                color="var(--Darkgray)"
                variant="h4"
              >
                cb3
              </ForwardRef(Typography)>
            }
          />
        </ForwardRef(FormControl)>
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        item={true}
        key="radiotest"
        mb={2}
        ml={6}
        mr={6}
        mt={2}
      >
        <ForwardRef(FormControl)
          className="formInput"
        >
          <ForwardRef(InputLabel)
            aria-labelledby="radio test"
            htmlFor="radiotest"
            shrink={true}
          >
            <b>
              radio test
            </b>
          </ForwardRef(InputLabel)>
          <ForwardRef(FormControlLabel)
            className="checkbox-field"
            control={
              <Radio
                checked={false}
                name="radiotest"
                onClick={[Function]}
              />
            }
            key="radiotest-radio1"
            label={
              <ForwardRef(Typography)
                className="fw-bold"
                color="var(--Darkgray)"
                variant="h4"
              >
                radio1
              </ForwardRef(Typography)>
            }
          />
          <ForwardRef(FormControlLabel)
            className="checkbox-field"
            control={
              <Radio
                checked={false}
                name="radiotest"
                onClick={[Function]}
              />
            }
            key="radiotest-radio2"
            label={
              <ForwardRef(Typography)
                className="fw-bold"
                color="var(--Darkgray)"
                variant="h4"
              >
                radio2
              </ForwardRef(Typography)>
            }
          />
        </ForwardRef(FormControl)>
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        className="lastItem"
        container={true}
        direction="row"
        item={true}
        justifyContent="flex-end"
      >
        <ForwardRef(Grid)
          item={true}
          m={2}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.clear all"
            onClick={[Function]}
            type="reset"
            types="cancel"
          >
            right-info-panel.filter.buttons.clear all
          </Styled(Button)>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          m={2}
          mr={6}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.apply"
            disabled={true}
            type="submit"
            types="save"
          >
            right-info-panel.filter.buttons.apply
          </Styled(Button)>
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
    </ForwardRef(Grid)>
  </form>
</ContextProvider>
`;

exports[`Rendering of Dynamic filter component Dynamic filter component snapshot testing with date 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "getFieldHelpers": [Function],
      "getFieldMeta": [Function],
      "getFieldProps": [Function],
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialErrors": Object {},
      "initialStatus": undefined,
      "initialTouched": Object {},
      "initialValues": Object {
        "date": null,
      },
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validateOnMount": false,
      "values": Object {
        "date": null,
      },
    }
  }
>
  <form
    className="dynamicForm"
    onReset={[Function]}
    onSubmit={[Function]}
  >
    <ForwardRef(Grid)
      className="sContainer"
      container={true}
      direction="column"
    >
      <ForwardRef(Grid)
        item={true}
        key="date"
        mb={2}
        ml={6}
        mr={6}
        mt={2}
      >
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <ForwardRef(InputLabel)
            aria-labelledby="Date"
            className="filter_label_item"
            htmlFor="date"
            shrink={true}
          >
            <b>
              Date
            </b>
          </ForwardRef(InputLabel)>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          container={true}
          item={true}
          xs={12}
        >
          <DatePickerInput
            dateRangeValue={null}
            error={false}
            id="cust-filter-date"
            name="date"
            onChange={[Function]}
            placeholder="Date"
            type="single-date"
            value={null}
          />
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        className="lastItem"
        container={true}
        direction="row"
        item={true}
        justifyContent="flex-end"
      >
        <ForwardRef(Grid)
          item={true}
          m={2}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.clear all"
            onClick={[Function]}
            type="reset"
            types="cancel"
          >
            right-info-panel.filter.buttons.clear all
          </Styled(Button)>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          m={2}
          mr={6}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.apply"
            disabled={true}
            type="submit"
            types="save"
          >
            right-info-panel.filter.buttons.apply
          </Styled(Button)>
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
    </ForwardRef(Grid)>
  </form>
</ContextProvider>
`;

exports[`Rendering of Dynamic filter component Dynamic filter component snapshot testing with daterange 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "getFieldHelpers": [Function],
      "getFieldMeta": [Function],
      "getFieldProps": [Function],
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialErrors": Object {},
      "initialStatus": undefined,
      "initialTouched": Object {},
      "initialValues": Object {
        "date": Array [
          null,
          null,
        ],
      },
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validateOnMount": false,
      "values": Object {
        "date": Array [
          null,
          null,
        ],
      },
    }
  }
>
  <form
    className="dynamicForm"
    onReset={[Function]}
    onSubmit={[Function]}
  >
    <ForwardRef(Grid)
      className="sContainer"
      container={true}
      direction="column"
    >
      <ForwardRef(Grid)
        item={true}
        key="date"
        mb={2}
        ml={6}
        mr={6}
        mt={2}
      >
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <ForwardRef(InputLabel)
            aria-labelledby="Date"
            className="filter_label_item"
            htmlFor="date"
            shrink={true}
          >
            <b>
              right-info-panel.filter.period
            </b>
          </ForwardRef(InputLabel)>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          container={true}
          item={true}
          xs={12}
        >
          <DatePickerInput
            dateRangeValue={
              Array [
                null,
                null,
              ]
            }
            error={false}
            id="cust-filter-date-range"
            name="date"
            onDateRangeChange={[Function]}
            placeholder={
              Object {
                "end": "right-info-panel.filter.to date",
                "start": "right-info-panel.filter.from date",
              }
            }
            required={true}
            type="date-range"
          />
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        className="lastItem"
        container={true}
        direction="row"
        item={true}
        justifyContent="flex-end"
      >
        <ForwardRef(Grid)
          item={true}
          m={2}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.clear all"
            onClick={[Function]}
            type="reset"
            types="cancel"
          >
            right-info-panel.filter.buttons.clear all
          </Styled(Button)>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          m={2}
          mr={6}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.apply"
            disabled={true}
            type="submit"
            types="save"
          >
            right-info-panel.filter.buttons.apply
          </Styled(Button)>
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
    </ForwardRef(Grid)>
  </form>
</ContextProvider>
`;

exports[`Rendering of Dynamic filter component Dynamic filter component snapshot testing with multi dropdown 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "getFieldHelpers": [Function],
      "getFieldMeta": [Function],
      "getFieldProps": [Function],
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialErrors": Object {},
      "initialStatus": undefined,
      "initialTouched": Object {},
      "initialValues": Object {
        "testText": Array [],
      },
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validateOnMount": false,
      "values": Object {
        "testText": Array [],
      },
    }
  }
>
  <form
    className="dynamicForm"
    onReset={[Function]}
    onSubmit={[Function]}
  >
    <ForwardRef(Grid)
      className="sContainer"
      container={true}
      direction="column"
    >
      <ForwardRef(Grid)
        item={true}
        key="testText"
        mb={2}
        ml={6}
        mr={6}
        mt={2}
      >
        <MultiSelect
          error={false}
          id="testText"
          items={
            Array [
              Object {
                "label": "option1",
                "value": "option1",
              },
              Object {
                "label": "option2",
                "value": "option2",
              },
            ]
          }
          label="dummy text"
          loadingMessage="Loading..."
          name="testText"
          noOptionsMessage="No Options found"
          onChange={[Function]}
          placeholder=""
          required={false}
          value={Array []}
        />
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        className="lastItem"
        container={true}
        direction="row"
        item={true}
        justifyContent="flex-end"
      >
        <ForwardRef(Grid)
          item={true}
          m={2}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.clear all"
            onClick={[Function]}
            type="reset"
            types="cancel"
          >
            right-info-panel.filter.buttons.clear all
          </Styled(Button)>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          m={2}
          mr={6}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.apply"
            disabled={true}
            type="submit"
            types="save"
          >
            right-info-panel.filter.buttons.apply
          </Styled(Button)>
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
    </ForwardRef(Grid)>
  </form>
</ContextProvider>
`;

exports[`Rendering of Dynamic filter component Dynamic filter component snapshot testing with radio 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "getFieldHelpers": [Function],
      "getFieldMeta": [Function],
      "getFieldProps": [Function],
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialErrors": Object {},
      "initialStatus": undefined,
      "initialTouched": Object {},
      "initialValues": Object {
        "radiotest": null,
      },
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validateOnMount": false,
      "values": Object {
        "radiotest": null,
      },
    }
  }
>
  <form
    className="dynamicForm"
    onReset={[Function]}
    onSubmit={[Function]}
  >
    <ForwardRef(Grid)
      className="sContainer"
      container={true}
      direction="column"
    >
      <ForwardRef(Grid)
        item={true}
        key="radiotest"
        mb={2}
        ml={6}
        mr={6}
        mt={2}
      >
        <ForwardRef(FormControl)
          className="formInput"
        >
          <ForwardRef(InputLabel)
            aria-labelledby="radio test"
            htmlFor="radiotest"
            shrink={true}
          >
            <b>
              radio test
            </b>
          </ForwardRef(InputLabel)>
          <ForwardRef(FormControlLabel)
            className="checkbox-field"
            control={
              <Radio
                checked={false}
                name="radiotest"
                onClick={[Function]}
              />
            }
            key="radiotest-radio1"
            label={
              <ForwardRef(Typography)
                className="fw-bold"
                color="var(--Darkgray)"
                variant="h4"
              >
                radio1
              </ForwardRef(Typography)>
            }
          />
          <ForwardRef(FormControlLabel)
            className="checkbox-field"
            control={
              <Radio
                checked={false}
                name="radiotest"
                onClick={[Function]}
              />
            }
            key="radiotest-radio2"
            label={
              <ForwardRef(Typography)
                className="fw-bold"
                color="var(--Darkgray)"
                variant="h4"
              >
                radio2
              </ForwardRef(Typography)>
            }
          />
        </ForwardRef(FormControl)>
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        className="lastItem"
        container={true}
        direction="row"
        item={true}
        justifyContent="flex-end"
      >
        <ForwardRef(Grid)
          item={true}
          m={2}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.clear all"
            onClick={[Function]}
            type="reset"
            types="cancel"
          >
            right-info-panel.filter.buttons.clear all
          </Styled(Button)>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          m={2}
          mr={6}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.apply"
            disabled={true}
            type="submit"
            types="save"
          >
            right-info-panel.filter.buttons.apply
          </Styled(Button)>
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
    </ForwardRef(Grid)>
  </form>
</ContextProvider>
`;

exports[`Rendering of Dynamic filter component Dynamic filter component snapshot testing with single dropdown 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "getFieldHelpers": [Function],
      "getFieldMeta": [Function],
      "getFieldProps": [Function],
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialErrors": Object {},
      "initialStatus": undefined,
      "initialTouched": Object {},
      "initialValues": Object {
        "SingleSelect1": null,
      },
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validateOnMount": false,
      "values": Object {
        "SingleSelect1": null,
      },
    }
  }
>
  <form
    className="dynamicForm"
    onReset={[Function]}
    onSubmit={[Function]}
  >
    <ForwardRef(Grid)
      className="sContainer"
      container={true}
      direction="column"
    >
      <ForwardRef(Grid)
        item={true}
        key="SingleSelect1"
        mb={2}
        ml={6}
        mr={6}
        mt={2}
      >
        <SingleSelect
          error={false}
          id="SingleSelect1"
          items={
            Array [
              Object {
                "label": "Regular",
                "value": "Regular",
              },
              Object {
                "label": "Premium",
                "value": "Premium",
              },
              Object {
                "label": "Diesel",
                "value": "Diesel",
              },
            ]
          }
          label="Single Select"
          name="SingleSelect1"
          onChange={[Function]}
          placeholder=""
          required={false}
          value={null}
        />
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        className="lastItem"
        container={true}
        direction="row"
        item={true}
        justifyContent="flex-end"
      >
        <ForwardRef(Grid)
          item={true}
          m={2}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.clear all"
            onClick={[Function]}
            type="reset"
            types="cancel"
          >
            right-info-panel.filter.buttons.clear all
          </Styled(Button)>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          m={2}
          mr={6}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.apply"
            disabled={true}
            type="submit"
            types="save"
          >
            right-info-panel.filter.buttons.apply
          </Styled(Button)>
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
    </ForwardRef(Grid)>
  </form>
</ContextProvider>
`;

exports[`Rendering of Dynamic filter component Dynamic filter component snapshot testing with textBox 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "getFieldHelpers": [Function],
      "getFieldMeta": [Function],
      "getFieldProps": [Function],
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialErrors": Object {},
      "initialStatus": undefined,
      "initialTouched": Object {},
      "initialValues": Object {
        "testText": "",
      },
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validateOnMount": false,
      "values": Object {
        "testText": "",
      },
    }
  }
>
  <form
    className="dynamicForm"
    onReset={[Function]}
    onSubmit={[Function]}
  >
    <ForwardRef(Grid)
      className="sContainer"
      container={true}
      direction="column"
    >
      <ForwardRef(Grid)
        item={true}
        key="testText"
        mb={2}
        ml={6}
        mr={6}
        mt={2}
      >
        <Input
          autoComplete="new-password"
          description=""
          disabled={false}
          error={false}
          id="testText"
          label={
            <ForwardRef(InputLabel)
              aria-labelledby="dummy text"
              htmlFor="testText"
              shrink={true}
            >
              <b>
                dummy text
              </b>
            </ForwardRef(InputLabel)>
          }
          onChange={[Function]}
          required={false}
          type="text"
          value=""
          width="100%"
        />
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        className="lastItem"
        container={true}
        direction="row"
        item={true}
        justifyContent="flex-end"
      >
        <ForwardRef(Grid)
          item={true}
          m={2}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.clear all"
            onClick={[Function]}
            type="reset"
            types="cancel"
          >
            right-info-panel.filter.buttons.clear all
          </Styled(Button)>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          m={2}
          mr={6}
        >
          <Styled(Button)
            aria-label="right-info-panel.filter.buttons.apply"
            disabled={true}
            type="submit"
            types="save"
          >
            right-info-panel.filter.buttons.apply
          </Styled(Button)>
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
    </ForwardRef(Grid)>
  </form>
</ContextProvider>
`;
