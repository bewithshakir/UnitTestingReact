// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rendering of Add Attachment Component Upload Attachment Component component Snapshot testing when 1`] = `
<QueryClientProvider
  client={
    QueryClient {
      "defaultOptions": Object {},
      "mutationCache": MutationCache {
        "config": Object {},
        "listeners": Array [],
        "mutationId": 0,
        "mutations": Array [],
      },
      "mutationDefaults": Array [],
      "queryCache": QueryCache {
        "config": Object {},
        "listeners": Array [],
        "queries": Array [],
        "queriesMap": Object {},
      },
      "queryDefaults": Array [],
      "unsubscribeFocus": [Function],
      "unsubscribeOnline": [Function],
    }
  }
>
  <AddAttachment
    version="Breadcrumbs-Many"
  >
    <ForwardRef(Box)
      className="upload-attachment-main-container"
    >
      <Styled(div)
        as="div"
        className="upload-attachment-main-container MuiBox-root"
        sx={Object {}}
        theme={
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "unit": "px",
              "up": [Function],
              "values": Object {
                "lg": 1200,
                "md": 900,
                "sm": 600,
                "xl": 1536,
                "xs": 0,
              },
            },
            "components": Object {},
            "direction": "ltr",
            "mixins": Object {
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "palette": Object {
              "action": Object {
                "activatedOpacity": 0.12,
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "disabledOpacity": 0.38,
                "focus": "rgba(0, 0, 0, 0.12)",
                "focusOpacity": 0.12,
                "hover": "rgba(0, 0, 0, 0.04)",
                "hoverOpacity": 0.04,
                "selected": "rgba(0, 0, 0, 0.08)",
                "selectedOpacity": 0.08,
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fff",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "#c62828",
                "light": "#ef5350",
                "main": "#d32f2f",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "50": "#fafafa",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#f5f5f5",
                "A200": "#eeeeee",
                "A400": "#bdbdbd",
                "A700": "#616161",
              },
              "info": Object {
                "contrastText": "#fff",
                "dark": "#01579b",
                "light": "#03a9f4",
                "main": "#0288d1",
              },
              "mode": "light",
              "primary": Object {
                "contrastText": "#fff",
                "dark": "#1565c0",
                "light": "#42a5f5",
                "main": "#1976d2",
              },
              "secondary": Object {
                "contrastText": "#fff",
                "dark": "#7b1fa2",
                "light": "#ba68c8",
                "main": "#9c27b0",
              },
              "success": Object {
                "contrastText": "#fff",
                "dark": "#1b5e20",
                "light": "#4caf50",
                "main": "#2e7d32",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.6)",
              },
              "tonalOffset": 0.2,
              "warning": Object {
                "contrastText": "#fff",
                "dark": "#e65100",
                "light": "#ff9800",
                "main": "#ED6C02",
              },
            },
            "shadows": Array [
              "none",
              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": [Function],
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 400,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.43,
              },
              "button": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 500,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 400,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": 14,
              "fontWeightBold": 700,
              "fontWeightLight": 300,
              "fontWeightMedium": 500,
              "fontWeightRegular": 400,
              "h1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "6rem",
                "fontWeight": 300,
                "letterSpacing": "-0.01562em",
                "lineHeight": 1.167,
              },
              "h2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 300,
                "letterSpacing": "-0.00833em",
                "lineHeight": 1.2,
              },
              "h3": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3rem",
                "fontWeight": 400,
                "letterSpacing": "0em",
                "lineHeight": 1.167,
              },
              "h4": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 400,
                "letterSpacing": "0.00735em",
                "lineHeight": 1.235,
              },
              "h5": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 400,
                "letterSpacing": "0em",
                "lineHeight": 1.334,
              },
              "h6": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.25rem",
                "fontWeight": 500,
                "letterSpacing": "0.0075em",
                "lineHeight": 1.6,
              },
              "htmlFontSize": 16,
              "overline": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 400,
                "letterSpacing": "0.08333em",
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "subtitle1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 400,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 500,
                "letterSpacing": "0.00714em",
                "lineHeight": 1.57,
              },
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "speedDial": 1050,
              "tooltip": 1500,
            },
          }
        }
      >
        <div
          className="upload-attachment-main-container MuiBox-root css-0"
        >
          <div
            className="upload-box"
          >
            <FileUploadComponent
              acceptedFiles=".pdf,.docx,.xlsx"
              maxFiles={1}
              maxSizeinBytes={25000000}
              multiple={false}
              onDrop={[Function]}
            >
              <div
                onBlur={[Function]}
                onClick={[Function]}
                onDragEnter={[Function]}
                onDragLeave={[Function]}
                onDragOver={[Function]}
                onDrop={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                tabIndex={0}
              >
                <input
                  accept=".pdf,.docx,.xlsx"
                  autoComplete="off"
                  multiple={false}
                  onChange={[Function]}
                  onClick={[Function]}
                  style={
                    Object {
                      "display": "none",
                    }
                  }
                  tabIndex={-1}
                  type="file"
                />
                <div
                  className="main-text"
                >
                  UploadAttachments.uploadInitialText
                   
                  <span
                    className="highlighted-text"
                  >
                    UploadAttachments.choose
                  </span>
                </div>
                <div
                  className="helper-text"
                >
                  UploadAttachments.fileFormatSize
                </div>
              </div>
            </FileUploadComponent>
          </div>
          <ToastMessage
            isOpen={false}
            message=""
            messageType=""
            onClose={[Function]}
          >
            <div
              className="toaster_wrapper"
              data-testid="toaster-message"
            >
              <WithStyles(ForwardRef(Snackbar))
                autoHideDuration={6000}
                onClose={[Function]}
                open={false}
              >
                <ForwardRef(Snackbar)
                  autoHideDuration={6000}
                  classes={
                    Object {
                      "anchorOriginBottomCenter": "MuiSnackbar-anchorOriginBottomCenter",
                      "anchorOriginBottomLeft": "MuiSnackbar-anchorOriginBottomLeft",
                      "anchorOriginBottomRight": "MuiSnackbar-anchorOriginBottomRight",
                      "anchorOriginTopCenter": "MuiSnackbar-anchorOriginTopCenter",
                      "anchorOriginTopLeft": "MuiSnackbar-anchorOriginTopLeft",
                      "anchorOriginTopRight": "MuiSnackbar-anchorOriginTopRight",
                      "root": "MuiSnackbar-root",
                    }
                  }
                  onClose={[Function]}
                  open={false}
                />
              </WithStyles(ForwardRef(Snackbar))>
            </div>
          </ToastMessage>
        </div>
      </Styled(div)>
    </ForwardRef(Box)>
    <Button
      aria-label="primary"
      className="final-upload-btn"
      disabled={true}
      onClick={[Function]}
      types="primary"
    >
      <WithStyles(ForwardRef(Button))
        aria-label="primary"
        className="btn-primary final-upload-btn"
        disabled={true}
        onClick={[Function]}
        variant="contained"
      >
        <ForwardRef(Button)
          aria-label="primary"
          className="btn-primary final-upload-btn"
          classes={
            Object {
              "colorInherit": "MuiButton-colorInherit",
              "contained": "MuiButton-contained",
              "containedPrimary": "MuiButton-containedPrimary",
              "containedSecondary": "MuiButton-containedSecondary",
              "containedSizeLarge": "MuiButton-containedSizeLarge",
              "containedSizeSmall": "MuiButton-containedSizeSmall",
              "disableElevation": "MuiButton-disableElevation",
              "disabled": "Mui-disabled",
              "endIcon": "MuiButton-endIcon",
              "focusVisible": "Mui-focusVisible",
              "fullWidth": "MuiButton-fullWidth",
              "iconSizeLarge": "MuiButton-iconSizeLarge",
              "iconSizeMedium": "MuiButton-iconSizeMedium",
              "iconSizeSmall": "MuiButton-iconSizeSmall",
              "label": "MuiButton-label",
              "outlined": "MuiButton-outlined",
              "outlinedPrimary": "MuiButton-outlinedPrimary",
              "outlinedSecondary": "MuiButton-outlinedSecondary",
              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
              "root": "MuiButton-root",
              "sizeLarge": "MuiButton-sizeLarge",
              "sizeSmall": "MuiButton-sizeSmall",
              "startIcon": "MuiButton-startIcon",
              "text": "MuiButton-text",
              "textPrimary": "MuiButton-textPrimary",
              "textSecondary": "MuiButton-textSecondary",
              "textSizeLarge": "MuiButton-textSizeLarge",
              "textSizeSmall": "MuiButton-textSizeSmall",
            }
          }
          disabled={true}
          onClick={[Function]}
          variant="contained"
        >
          <WithStyles(ForwardRef(ButtonBase))
            aria-label="primary"
            className="MuiButton-root MuiButton-contained btn-primary final-upload-btn Mui-disabled"
            component="button"
            disabled={true}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            onClick={[Function]}
            type="button"
          >
            <ForwardRef(ButtonBase)
              aria-label="primary"
              className="MuiButton-root MuiButton-contained btn-primary final-upload-btn Mui-disabled"
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "root": "MuiButtonBase-root",
                }
              }
              component="button"
              disabled={true}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[Function]}
              type="button"
            >
              <button
                aria-label="primary"
                className="MuiButtonBase-root MuiButton-root MuiButton-contained btn-primary final-upload-btn Mui-disabled Mui-disabled"
                disabled={true}
                onBlur={[Function]}
                onClick={[Function]}
                onDragLeave={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                tabIndex={-1}
                type="button"
              >
                <span
                  className="MuiButton-label"
                >
                   
                  <ImportIcon>
                    <svg
                      height="1em"
                      viewBox="0 0 20 20"
                      width="1em"
                    >
                      <path
                        d="M2 16v2h16v-2h2v4H0v-4zm8-15l6.065 6.058-1.413 1.415L11 4.826v12.019H9V4.61l-4.282 3.9-1.346-1.484z"
                        fill="currentColor"
                      />
                      <path
                        d="M0 0h20v20H0z"
                        fill="none"
                      />
                    </svg>
                  </ImportIcon>
                   
                  UploadAttachments.uploadFile
                   
                </span>
              </button>
            </ForwardRef(ButtonBase)>
          </WithStyles(ForwardRef(ButtonBase))>
        </ForwardRef(Button)>
      </WithStyles(ForwardRef(Button))>
    </Button>
    <DiscardChangesDialog
      cancelBtnTitle="UploadAttachments.no"
      content="UploadAttachments.fileuploaddialog.content"
      discardBtnTitle="UploadAttachments.yes"
      handleConfirm={[Function]}
      handleToggle={[Function]}
      open={false}
      title="UploadAttachments.fileuploaddialog.title"
    >
      <ForwardRef(Dialog)
        aria-describedby="discard-changes-dialog-description"
        aria-labelledby="discard-changes-dialog-title"
        open={false}
      >
        <MuiDialogRoot
          BackdropComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "__emotion_base": Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "children": [Function],
                  "className": [Function],
                  "classes": [Function],
                  "components": [Function],
                  "componentsProps": [Function],
                  "invisible": [Function],
                  "open": [Function],
                  "sx": [Function],
                  "transitionDuration": [Function],
                },
                "render": [Function],
              },
              "__emotion_forwardProp": [Function],
              "__emotion_real": [Circular],
              "__emotion_styles": Array [
                "label:MuiDialog-backdrop;",
                Object {
                  "zIndex": -1,
                },
                [Function],
              ],
              "defaultProps": undefined,
              "render": [Function],
              "withComponent": [Function],
            }
          }
          BackdropProps={
            Object {
              "as": undefined,
              "transitionDuration": Object {
                "enter": 225,
                "exit": 195,
              },
            }
          }
          className="MuiDialog-root"
          closeAfterTransition={true}
          disableEscapeKeyDown={false}
          onClick={[Function]}
          open={false}
          ownerState={
            Object {
              "aria-describedby": "discard-changes-dialog-description",
              "aria-labelledby": "discard-changes-dialog-title",
              "children": <div
                className="discard-dialog-container"
                id="discard-dialogue"
              >
                <ForwardRef(Typography)
                  className="fw-bold"
                  color="var(--Darkgray)"
                  component="h2"
                  pt={2.5}
                  px={2.5}
                  variant="h2"
                >
                  UploadAttachments.fileuploaddialog.title
                </ForwardRef(Typography)>
                <ForwardRef(DialogContent)
                  className="dialog-content"
                >
                  <ForwardRef(DialogContentText)
                    color="var(--Darkgray)"
                    id="discard-changes-dialog-description"
                  >
                    UploadAttachments.fileuploaddialog.content
                  </ForwardRef(DialogContentText)>
                </ForwardRef(DialogContent)>
                <ForwardRef(DialogActions)
                  className="dialog-actions"
                >
                  <Button
                    className="action-no"
                    onClick={[Function]}
                    variant="outlined"
                  >
                    UploadAttachments.no
                  </Button>
                  <Button
                    className="action-yes"
                    color="default"
                    onClick={[Function]}
                  >
                    UploadAttachments.yes
                  </Button>
                </ForwardRef(DialogActions)>
              </div>,
              "disableEscapeKeyDown": false,
              "fullScreen": false,
              "fullWidth": false,
              "maxWidth": "sm",
              "open": false,
              "scroll": "paper",
            }
          }
        >
          <ForwardRef(Modal)
            BackdropComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "__emotion_base": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "propTypes": Object {
                    "children": [Function],
                    "className": [Function],
                    "classes": [Function],
                    "components": [Function],
                    "componentsProps": [Function],
                    "invisible": [Function],
                    "open": [Function],
                    "sx": [Function],
                    "transitionDuration": [Function],
                  },
                  "render": [Function],
                },
                "__emotion_forwardProp": [Function],
                "__emotion_real": [Circular],
                "__emotion_styles": Array [
                  "label:MuiDialog-backdrop;",
                  Object {
                    "zIndex": -1,
                  },
                  [Function],
                ],
                "defaultProps": undefined,
                "render": [Function],
                "withComponent": [Function],
              }
            }
            BackdropProps={
              Object {
                "as": undefined,
                "transitionDuration": Object {
                  "enter": 225,
                  "exit": 195,
                },
              }
            }
            className="MuiDialog-root css-1h8td7x-MuiDialog-root"
            closeAfterTransition={true}
            disableEscapeKeyDown={false}
            onClick={[Function]}
            open={false}
          >
            <ForwardRef(ModalUnstyled)
              BackdropComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "__emotion_base": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "propTypes": Object {
                      "children": [Function],
                      "className": [Function],
                      "classes": [Function],
                      "components": [Function],
                      "componentsProps": [Function],
                      "invisible": [Function],
                      "open": [Function],
                      "sx": [Function],
                      "transitionDuration": [Function],
                    },
                    "render": [Function],
                  },
                  "__emotion_forwardProp": [Function],
                  "__emotion_real": [Circular],
                  "__emotion_styles": Array [
                    "label:MuiDialog-backdrop;",
                    Object {
                      "zIndex": -1,
                    },
                    [Function],
                  ],
                  "defaultProps": undefined,
                  "render": [Function],
                  "withComponent": [Function],
                }
              }
              BackdropProps={
                Object {
                  "as": undefined,
                  "transitionDuration": Object {
                    "enter": 225,
                    "exit": 195,
                  },
                }
              }
              className="MuiDialog-root css-1h8td7x-MuiDialog-root"
              closeAfterTransition={true}
              components={
                Object {
                  "Root": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "__emotion_base": "div",
                    "__emotion_forwardProp": [Function],
                    "__emotion_real": [Circular],
                    "__emotion_styles": Array [
                      "label:MuiModal-root;",
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                    ],
                    "defaultProps": undefined,
                    "render": [Function],
                    "withComponent": [Function],
                  },
                }
              }
              componentsProps={
                Object {
                  "root": Object {
                    "ownerState": Object {},
                  },
                }
              }
              disableAutoFocus={false}
              disableEnforceFocus={false}
              disableEscapeKeyDown={false}
              disablePortal={false}
              disableRestoreFocus={false}
              disableScrollLock={false}
              hideBackdrop={false}
              keepMounted={false}
              onClick={[Function]}
              onTransitionEnter={[Function]}
              onTransitionExited={[Function]}
              open={false}
            />
          </ForwardRef(Modal)>
        </MuiDialogRoot>
      </ForwardRef(Dialog)>
    </DiscardChangesDialog>
  </AddAttachment>
</QueryClientProvider>
`;
