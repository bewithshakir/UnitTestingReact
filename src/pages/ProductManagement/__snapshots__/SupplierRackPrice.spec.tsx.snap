// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rendering of supplier rack price should render snapshot for supplier rack price 1`] = `
<QueryClientProvider
  client={
    QueryClient {
      "defaultOptions": Object {},
      "mutationCache": MutationCache {
        "config": Object {},
        "listeners": Array [],
        "mutationId": 0,
        "mutations": Array [],
      },
      "mutationDefaults": Array [],
      "queryCache": QueryCache {
        "config": Object {},
        "listeners": Array [],
        "queries": Array [
          Query {
            "abortSignalConsumed": false,
            "cache": [Circular],
            "cacheTime": 300000,
            "defaultOptions": undefined,
            "gcTimeout": undefined,
            "hadObservers": true,
            "initialState": Object {
              "data": undefined,
              "dataUpdateCount": 0,
              "dataUpdatedAt": 0,
              "error": null,
              "errorUpdateCount": 0,
              "errorUpdatedAt": 0,
              "fetchFailureCount": 0,
              "fetchMeta": null,
              "isFetching": false,
              "isInvalidated": false,
              "isPaused": false,
              "status": "idle",
            },
            "meta": undefined,
            "observers": Array [
              QueryObserver {
                "client": [Circular],
                "currentQuery": [Circular],
                "currentQueryInitialState": Object {
                  "data": undefined,
                  "dataUpdateCount": 0,
                  "dataUpdatedAt": 0,
                  "error": null,
                  "errorUpdateCount": 0,
                  "errorUpdatedAt": 0,
                  "fetchFailureCount": 0,
                  "fetchMeta": null,
                  "isFetching": false,
                  "isInvalidated": false,
                  "isPaused": false,
                  "status": "idle",
                },
                "currentRefetchInterval": false,
                "currentResult": Object {
                  "data": undefined,
                  "dataUpdatedAt": 0,
                  "error": null,
                  "errorUpdatedAt": 0,
                  "failureCount": 0,
                  "isError": false,
                  "isFetched": false,
                  "isFetchedAfterMount": false,
                  "isFetching": true,
                  "isIdle": false,
                  "isLoading": true,
                  "isLoadingError": false,
                  "isPlaceholderData": false,
                  "isPreviousData": false,
                  "isRefetchError": false,
                  "isRefetching": false,
                  "isStale": true,
                  "isSuccess": false,
                  "refetch": [Function],
                  "remove": [Function],
                  "status": "loading",
                },
                "currentResultOptions": Object {
                  "_defaulted": true,
                  "optimisticResults": true,
                  "queryFn": [Function],
                  "queryHash": "[\\"getSupplierPrices\\",{\\"actualProduct\\":[],\\"brandIndicator\\":[],\\"supplier\\":[]}]",
                  "queryKey": Array [
                    "getSupplierPrices",
                    Object {
                      "actualProduct": Array [],
                      "brandIndicator": Array [],
                      "cityId": undefined,
                      "supplier": Array [],
                    },
                  ],
                },
                "currentResultState": Object {
                  "data": undefined,
                  "dataUpdateCount": 0,
                  "dataUpdatedAt": 0,
                  "error": null,
                  "errorUpdateCount": 0,
                  "errorUpdatedAt": 0,
                  "fetchFailureCount": 0,
                  "fetchMeta": null,
                  "isFetching": true,
                  "isInvalidated": false,
                  "isPaused": false,
                  "status": "loading",
                },
                "listeners": Array [
                  [Function],
                ],
                "options": Object {
                  "_defaulted": true,
                  "optimisticResults": true,
                  "queryFn": [Function],
                  "queryHash": "[\\"getSupplierPrices\\",{\\"actualProduct\\":[],\\"brandIndicator\\":[],\\"supplier\\":[]}]",
                  "queryKey": Array [
                    "getSupplierPrices",
                    Object {
                      "actualProduct": Array [],
                      "brandIndicator": Array [],
                      "cityId": undefined,
                      "supplier": Array [],
                    },
                  ],
                },
                "previousQueryResult": undefined,
                "previousSelectError": null,
                "refetch": [Function],
                "refetchIntervalId": undefined,
                "remove": [Function],
                "staleTimeoutId": undefined,
                "trackedProps": Array [],
              },
            ],
            "options": Object {
              "_defaulted": true,
              "optimisticResults": true,
              "queryFn": [Function],
              "queryHash": "[\\"getSupplierPrices\\",{\\"actualProduct\\":[],\\"brandIndicator\\":[],\\"supplier\\":[]}]",
              "queryKey": Array [
                "getSupplierPrices",
                Object {
                  "actualProduct": Array [],
                  "brandIndicator": Array [],
                  "cityId": undefined,
                  "supplier": Array [],
                },
              ],
            },
            "promise": Promise {},
            "queryHash": "[\\"getSupplierPrices\\",{\\"actualProduct\\":[],\\"brandIndicator\\":[],\\"supplier\\":[]}]",
            "queryKey": Array [
              "getSupplierPrices",
              Object {
                "actualProduct": Array [],
                "brandIndicator": Array [],
                "cityId": undefined,
                "supplier": Array [],
              },
            ],
            "retryer": Retryer {
              "abort": [Function],
              "cancel": [Function],
              "cancelRetry": [Function],
              "continue": [Function],
              "continueRetry": [Function],
              "failureCount": 0,
              "isPaused": false,
              "isResolved": false,
              "isTransportCancelable": false,
              "promise": Promise {},
            },
            "revertState": Object {
              "data": undefined,
              "dataUpdateCount": 0,
              "dataUpdatedAt": 0,
              "error": null,
              "errorUpdateCount": 0,
              "errorUpdatedAt": 0,
              "fetchFailureCount": 0,
              "fetchMeta": null,
              "isFetching": false,
              "isInvalidated": false,
              "isPaused": false,
              "status": "idle",
            },
            "state": Object {
              "data": undefined,
              "dataUpdateCount": 0,
              "dataUpdatedAt": 0,
              "error": null,
              "errorUpdateCount": 0,
              "errorUpdatedAt": 0,
              "fetchFailureCount": 0,
              "fetchMeta": null,
              "isFetching": true,
              "isInvalidated": false,
              "isPaused": false,
              "status": "loading",
            },
          },
        ],
        "queriesMap": Object {
          "[\\"getSupplierPrices\\",{\\"actualProduct\\":[],\\"brandIndicator\\":[],\\"supplier\\":[]}]": Query {
            "abortSignalConsumed": false,
            "cache": [Circular],
            "cacheTime": 300000,
            "defaultOptions": undefined,
            "gcTimeout": undefined,
            "hadObservers": true,
            "initialState": Object {
              "data": undefined,
              "dataUpdateCount": 0,
              "dataUpdatedAt": 0,
              "error": null,
              "errorUpdateCount": 0,
              "errorUpdatedAt": 0,
              "fetchFailureCount": 0,
              "fetchMeta": null,
              "isFetching": false,
              "isInvalidated": false,
              "isPaused": false,
              "status": "idle",
            },
            "meta": undefined,
            "observers": Array [
              QueryObserver {
                "client": [Circular],
                "currentQuery": [Circular],
                "currentQueryInitialState": Object {
                  "data": undefined,
                  "dataUpdateCount": 0,
                  "dataUpdatedAt": 0,
                  "error": null,
                  "errorUpdateCount": 0,
                  "errorUpdatedAt": 0,
                  "fetchFailureCount": 0,
                  "fetchMeta": null,
                  "isFetching": false,
                  "isInvalidated": false,
                  "isPaused": false,
                  "status": "idle",
                },
                "currentRefetchInterval": false,
                "currentResult": Object {
                  "data": undefined,
                  "dataUpdatedAt": 0,
                  "error": null,
                  "errorUpdatedAt": 0,
                  "failureCount": 0,
                  "isError": false,
                  "isFetched": false,
                  "isFetchedAfterMount": false,
                  "isFetching": true,
                  "isIdle": false,
                  "isLoading": true,
                  "isLoadingError": false,
                  "isPlaceholderData": false,
                  "isPreviousData": false,
                  "isRefetchError": false,
                  "isRefetching": false,
                  "isStale": true,
                  "isSuccess": false,
                  "refetch": [Function],
                  "remove": [Function],
                  "status": "loading",
                },
                "currentResultOptions": Object {
                  "_defaulted": true,
                  "optimisticResults": true,
                  "queryFn": [Function],
                  "queryHash": "[\\"getSupplierPrices\\",{\\"actualProduct\\":[],\\"brandIndicator\\":[],\\"supplier\\":[]}]",
                  "queryKey": Array [
                    "getSupplierPrices",
                    Object {
                      "actualProduct": Array [],
                      "brandIndicator": Array [],
                      "cityId": undefined,
                      "supplier": Array [],
                    },
                  ],
                },
                "currentResultState": Object {
                  "data": undefined,
                  "dataUpdateCount": 0,
                  "dataUpdatedAt": 0,
                  "error": null,
                  "errorUpdateCount": 0,
                  "errorUpdatedAt": 0,
                  "fetchFailureCount": 0,
                  "fetchMeta": null,
                  "isFetching": true,
                  "isInvalidated": false,
                  "isPaused": false,
                  "status": "loading",
                },
                "listeners": Array [
                  [Function],
                ],
                "options": Object {
                  "_defaulted": true,
                  "optimisticResults": true,
                  "queryFn": [Function],
                  "queryHash": "[\\"getSupplierPrices\\",{\\"actualProduct\\":[],\\"brandIndicator\\":[],\\"supplier\\":[]}]",
                  "queryKey": Array [
                    "getSupplierPrices",
                    Object {
                      "actualProduct": Array [],
                      "brandIndicator": Array [],
                      "cityId": undefined,
                      "supplier": Array [],
                    },
                  ],
                },
                "previousQueryResult": undefined,
                "previousSelectError": null,
                "refetch": [Function],
                "refetchIntervalId": undefined,
                "remove": [Function],
                "staleTimeoutId": undefined,
                "trackedProps": Array [],
              },
            ],
            "options": Object {
              "_defaulted": true,
              "optimisticResults": true,
              "queryFn": [Function],
              "queryHash": "[\\"getSupplierPrices\\",{\\"actualProduct\\":[],\\"brandIndicator\\":[],\\"supplier\\":[]}]",
              "queryKey": Array [
                "getSupplierPrices",
                Object {
                  "actualProduct": Array [],
                  "brandIndicator": Array [],
                  "cityId": undefined,
                  "supplier": Array [],
                },
              ],
            },
            "promise": Promise {},
            "queryHash": "[\\"getSupplierPrices\\",{\\"actualProduct\\":[],\\"brandIndicator\\":[],\\"supplier\\":[]}]",
            "queryKey": Array [
              "getSupplierPrices",
              Object {
                "actualProduct": Array [],
                "brandIndicator": Array [],
                "cityId": undefined,
                "supplier": Array [],
              },
            ],
            "retryer": Retryer {
              "abort": [Function],
              "cancel": [Function],
              "cancelRetry": [Function],
              "continue": [Function],
              "continueRetry": [Function],
              "failureCount": 0,
              "isPaused": false,
              "isResolved": false,
              "isTransportCancelable": false,
              "promise": Promise {},
            },
            "revertState": Object {
              "data": undefined,
              "dataUpdateCount": 0,
              "dataUpdatedAt": 0,
              "error": null,
              "errorUpdateCount": 0,
              "errorUpdatedAt": 0,
              "fetchFailureCount": 0,
              "fetchMeta": null,
              "isFetching": false,
              "isInvalidated": false,
              "isPaused": false,
              "status": "idle",
            },
            "state": Object {
              "data": undefined,
              "dataUpdateCount": 0,
              "dataUpdatedAt": 0,
              "error": null,
              "errorUpdateCount": 0,
              "errorUpdatedAt": 0,
              "fetchFailureCount": 0,
              "fetchMeta": null,
              "isFetching": true,
              "isInvalidated": false,
              "isPaused": false,
              "status": "loading",
            },
          },
        },
      },
      "queryDefaults": Array [],
      "unsubscribeFocus": [Function],
      "unsubscribeOnline": [Function],
    }
  }
>
   
  <SupplierRack
    formik={
      Object {
        "error": "",
        "errors": Object {},
        "getFieldProps": [MockFunction],
        "initialError": "",
        "initialTouched": false,
        "initialValue": "",
        "setFieldValue": [MockFunction],
        "touched": Object {},
        "values": Object {
          "actualProduct": Array [],
          "addedPriceAmt": 0,
          "branded": Array [],
          "city": "",
          "cityId": "",
          "discountPriceAmt": 0,
          "manualPriceAmt": 0,
          "masterProductName": Object {
            "label": "",
            "value": "",
          },
          "opisName": "abc",
          "pricingModel": Object {
            "label": "",
            "value": "",
          },
          "productNm": "",
          "productType": Object {
            "label": "",
            "value": "",
          },
          "state": "",
          "supplier": Array [],
          "supplierPrice": 0,
          "taxExemption": Array [],
        },
      }
    }
    isDisabled={false}
    isSaveCancelShown={false}
    resetSupplierValue="xyz"
    setSupplierPrice={[MockFunction]}
  >
    <h4
      className="checkbox-heading price-heading"
    >
       
      addProductFormLabels.supplierrackheading
       
    </h4>
    <Button
      className="supplier-modal-btn "
      disabled={true}
      variant="outlined"
    >
      <WithStyles(ForwardRef(Button))
        className="supplier-modal-btn "
        color="default"
        disabled={true}
        variant="outlined"
      >
        <ForwardRef(Button)
          className="supplier-modal-btn "
          classes={
            Object {
              "colorInherit": "MuiButton-colorInherit",
              "contained": "MuiButton-contained",
              "containedPrimary": "MuiButton-containedPrimary",
              "containedSecondary": "MuiButton-containedSecondary",
              "containedSizeLarge": "MuiButton-containedSizeLarge",
              "containedSizeSmall": "MuiButton-containedSizeSmall",
              "disableElevation": "MuiButton-disableElevation",
              "disabled": "Mui-disabled",
              "endIcon": "MuiButton-endIcon",
              "focusVisible": "Mui-focusVisible",
              "fullWidth": "MuiButton-fullWidth",
              "iconSizeLarge": "MuiButton-iconSizeLarge",
              "iconSizeMedium": "MuiButton-iconSizeMedium",
              "iconSizeSmall": "MuiButton-iconSizeSmall",
              "label": "MuiButton-label",
              "outlined": "MuiButton-outlined",
              "outlinedPrimary": "MuiButton-outlinedPrimary",
              "outlinedSecondary": "MuiButton-outlinedSecondary",
              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
              "root": "MuiButton-root",
              "sizeLarge": "MuiButton-sizeLarge",
              "sizeSmall": "MuiButton-sizeSmall",
              "startIcon": "MuiButton-startIcon",
              "text": "MuiButton-text",
              "textPrimary": "MuiButton-textPrimary",
              "textSecondary": "MuiButton-textSecondary",
              "textSizeLarge": "MuiButton-textSizeLarge",
              "textSizeSmall": "MuiButton-textSizeSmall",
            }
          }
          color="default"
          disabled={true}
          variant="outlined"
        >
          <WithStyles(ForwardRef(ButtonBase))
            className="MuiButton-root MuiButton-outlined supplier-modal-btn  Mui-disabled"
            component="button"
            disabled={true}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="button"
          >
            <ForwardRef(ButtonBase)
              className="MuiButton-root MuiButton-outlined supplier-modal-btn  Mui-disabled"
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "root": "MuiButtonBase-root",
                }
              }
              component="button"
              disabled={true}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              type="button"
            >
              <button
                className="MuiButtonBase-root MuiButton-root MuiButton-outlined supplier-modal-btn  Mui-disabled Mui-disabled"
                disabled={true}
                onBlur={[Function]}
                onDragLeave={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                tabIndex={-1}
                type="button"
              >
                <span
                  className="MuiButton-label"
                >
                  <div
                    className="price-div"
                    onClick={[Function]}
                  >
                     
                    Supplier price $0
                     
                  </div>
                   
                </span>
              </button>
            </ForwardRef(ButtonBase)>
          </WithStyles(ForwardRef(ButtonBase))>
        </ForwardRef(Button)>
      </WithStyles(ForwardRef(Button))>
    </Button>
    <ForwardRef(Dialog)
      aria-labelledby="supplier-rack-dialog"
      className="supplierRack"
      disableEscapeKeyDown={true}
      onClose={[Function]}
      open={false}
    >
      <MuiDialogRoot
        BackdropComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "__emotion_base": Object {
              "$$typeof": Symbol(react.forward_ref),
              "propTypes": Object {
                "children": [Function],
                "className": [Function],
                "classes": [Function],
                "components": [Function],
                "componentsProps": [Function],
                "invisible": [Function],
                "open": [Function],
                "sx": [Function],
                "transitionDuration": [Function],
              },
              "render": [Function],
            },
            "__emotion_forwardProp": [Function],
            "__emotion_real": [Circular],
            "__emotion_styles": Array [
              "label:MuiDialog-backdrop;",
              Object {
                "zIndex": -1,
              },
              [Function],
            ],
            "defaultProps": undefined,
            "render": [Function],
            "withComponent": [Function],
          }
        }
        BackdropProps={
          Object {
            "as": undefined,
            "transitionDuration": Object {
              "enter": 225,
              "exit": 195,
            },
          }
        }
        className="MuiDialog-root supplierRack"
        closeAfterTransition={true}
        disableEscapeKeyDown={true}
        onClick={[Function]}
        onClose={[Function]}
        open={false}
        ownerState={
          Object {
            "aria-labelledby": "supplier-rack-dialog",
            "children": <div
              className="supplierRack-dialog-container"
            >
              <ForwardRef(Grid)
                container={true}
              >
                <ForwardRef(Grid)
                  item={true}
                  md={10}
                  xs={10}
                >
                  <ForwardRef(Typography)
                    className="fw-bold"
                    color="var(--Darkgray)"
                    component="h2"
                    id="supplier-rack-dialog-title"
                    pl={4.5}
                    pt={2.5}
                    variant="h2"
                  >
                    addProductFormLabels.supplierpriceheading
                  </ForwardRef(Typography)>
                </ForwardRef(Grid)>
                <ForwardRef(Grid)
                  item={true}
                  md={2}
                  textAlign="right"
                  xs={2}
                >
                  <ForwardRef(IconButton)
                    edge="start"
                    onClick={[Function]}
                  >
                    <CloseIcon
                      className="info_panel_close_icon"
                    />
                  </ForwardRef(IconButton)>
                </ForwardRef(Grid)>
              </ForwardRef(Grid)>
              <ForwardRef(DialogContent)
                className="supplierRack-content"
              >
                <ForwardRef(Grid)
                  container={true}
                >
                  <ForwardRef(Grid)
                    item={true}
                    md={12}
                    pb={5}
                    xs={12}
                  >
                    <GridComponent
                      enableRowAction={false}
                      enableRowSelection={true}
                      getPages={[Function]}
                      handleSelect={[Function]}
                      header={
                        Array [
                          Object {
                            "field": "productIndicator",
                            "label": "PRODUCT INDICATOR",
                            "type": "text",
                          },
                          Object {
                            "field": "productType",
                            "label": "PRODUCT TYPE",
                            "type": "text",
                          },
                          Object {
                            "field": "priceDate",
                            "label": "DATE DAILY",
                            "type": "text",
                          },
                          Object {
                            "field": "cityId",
                            "label": "CITY ID",
                            "type": "text",
                          },
                          Object {
                            "field": "state",
                            "label": "STATE",
                            "type": "text",
                          },
                          Object {
                            "field": "city",
                            "label": "CITY",
                            "type": "text",
                          },
                          Object {
                            "field": "supplier",
                            "label": "SUPPLIER",
                            "type": "text",
                          },
                          Object {
                            "field": "brandIndicator",
                            "label": "BRAND",
                            "type": "text",
                          },
                          Object {
                            "field": "terms",
                            "label": "TERM",
                            "type": "text",
                          },
                          Object {
                            "field": "grossPrice",
                            "label": "NET PRICE",
                            "type": "text",
                          },
                          Object {
                            "field": "uniqueMarker",
                            "label": "UNIQUE MARKER",
                            "type": "text",
                          },
                          Object {
                            "field": "octaneValue",
                            "label": "OCTANE LEVEL",
                            "type": "text",
                          },
                          Object {
                            "field": "actualProduct",
                            "label": "ACTUAL PRODUCT",
                            "type": "text",
                          },
                          Object {
                            "field": "rvp",
                            "label": "RVP",
                            "type": "text",
                          },
                          Object {
                            "field": "dieselBlend",
                            "label": "DIESEL BLEND",
                            "type": "text",
                          },
                          Object {
                            "field": "bioType",
                            "label": "BIO TYPE",
                            "type": "text",
                          },
                          Object {
                            "field": "lastUpdatedDate",
                            "label": "LAST UPDATED DATE",
                            "type": "text",
                          },
                        ]
                      }
                      isLoading={false}
                      noDataMsg="addProductFormLabels.supplierpricenodatamsg"
                      primaryKey="productKey"
                      rowActionOptions={Array []}
                      rows={Array []}
                      searchTerm=""
                      singleRowSelection={true}
                    />
                  </ForwardRef(Grid)>
                </ForwardRef(Grid)>
                <ForwardRef(DialogActions)
                  className="supplierRack-dialog-actions"
                >
                  <Button
                    aria-label="cancel"
                    className="mr-4"
                    onClick={[Function]}
                    types="cancel"
                  >
                    Cancel
                  </Button>
                  <Button
                    aria-label="primary"
                    className="mr-4 supplierRackBtn"
                    disabled={true}
                    onClick={[Function]}
                    types="primary"
                  >
                    Done
                  </Button>
                </ForwardRef(DialogActions)>
              </ForwardRef(DialogContent)>
            </div>,
            "className": "supplierRack",
            "disableEscapeKeyDown": true,
            "fullScreen": false,
            "fullWidth": false,
            "maxWidth": "sm",
            "onClose": [Function],
            "open": false,
            "scroll": "paper",
          }
        }
      >
        <Insertion
          cache={
            Object {
              "insert": [Function],
              "inserted": Object {
                "1h8td7x-MuiDialog-root": true,
              },
              "key": "css",
              "nonce": undefined,
              "registered": Object {
                "css-1h8td7x-MuiDialog-root": "label:MuiDialog-root;@media print{position:absolute !important;}",
              },
              "sheet": StyleSheet {
                "_alreadyInsertedOrderInsensitiveRule": true,
                "_insertTag": [Function],
                "before": null,
                "container": <head>
                  <style
                    data-jss=""
                    data-meta="MuiButtonBase"
                  >
                    
.MuiButtonBase-root {
  color: inherit;
  border: 0;
  cursor: pointer;
  margin: 0;
  display: inline-flex;
  outline: 0;
  padding: 0;
  position: relative;
  align-items: center;
  user-select: none;
  border-radius: 0;
  vertical-align: middle;
  -moz-appearance: none;
  justify-content: center;
  text-decoration: none;
  background-color: transparent;
  -webkit-appearance: none;
  -webkit-tap-highlight-color: transparent;
}
.MuiButtonBase-root::-moz-focus-inner {
  border-style: none;
}
.MuiButtonBase-root.Mui-disabled {
  cursor: default;
  pointer-events: none;
}
@media print {
  .MuiButtonBase-root {
    color-adjust: exact;
  }
}

                  </style>
                  <style
                    data-jss=""
                    data-meta="MuiButton"
                  >
                    
.MuiButton-root {
  color: rgba(0, 0, 0, 0.87);
  padding: 6px 16px;
  font-size: 0.875rem;
  min-width: 64px;
  box-sizing: border-box;
  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  font-family: "Roboto", "Helvetica", "Arial", sans-serif;
  font-weight: 500;
  line-height: 1.75;
  border-radius: 4px;
  letter-spacing: 0.02857em;
  text-transform: uppercase;
}
.MuiButton-root:hover {
  text-decoration: none;
  background-color: rgba(0, 0, 0, 0.04);
}
.MuiButton-root.Mui-disabled {
  color: rgba(0, 0, 0, 0.26);
}
@media (hover: none) {
  .MuiButton-root:hover {
    background-color: transparent;
  }
}
.MuiButton-root:hover.Mui-disabled {
  background-color: transparent;
}
.MuiButton-label {
  width: 100%;
  display: inherit;
  align-items: inherit;
  justify-content: inherit;
}
.MuiButton-text {
  padding: 6px 8px;
}
.MuiButton-textPrimary {
  color: #3f51b5;
}
.MuiButton-textPrimary:hover {
  background-color: rgba(63, 81, 181, 0.04);
}
@media (hover: none) {
  .MuiButton-textPrimary:hover {
    background-color: transparent;
  }
}
.MuiButton-textSecondary {
  color: #f50057;
}
.MuiButton-textSecondary:hover {
  background-color: rgba(245, 0, 87, 0.04);
}
@media (hover: none) {
  .MuiButton-textSecondary:hover {
    background-color: transparent;
  }
}
.MuiButton-outlined {
  border: 1px solid rgba(0, 0, 0, 0.23);
  padding: 5px 15px;
}
.MuiButton-outlined.Mui-disabled {
  border: 1px solid rgba(0, 0, 0, 0.12);
}
.MuiButton-outlinedPrimary {
  color: #3f51b5;
  border: 1px solid rgba(63, 81, 181, 0.5);
}
.MuiButton-outlinedPrimary:hover {
  border: 1px solid #3f51b5;
  background-color: rgba(63, 81, 181, 0.04);
}
@media (hover: none) {
  .MuiButton-outlinedPrimary:hover {
    background-color: transparent;
  }
}
.MuiButton-outlinedSecondary {
  color: #f50057;
  border: 1px solid rgba(245, 0, 87, 0.5);
}
.MuiButton-outlinedSecondary:hover {
  border: 1px solid #f50057;
  background-color: rgba(245, 0, 87, 0.04);
}
.MuiButton-outlinedSecondary.Mui-disabled {
  border: 1px solid rgba(0, 0, 0, 0.26);
}
@media (hover: none) {
  .MuiButton-outlinedSecondary:hover {
    background-color: transparent;
  }
}
.MuiButton-contained {
  color: rgba(0, 0, 0, 0.87);
  box-shadow: 0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);
  background-color: #e0e0e0;
}
.MuiButton-contained:hover {
  box-shadow: 0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12);
  background-color: #d5d5d5;
}
.MuiButton-contained.Mui-focusVisible {
  box-shadow: 0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12);
}
.MuiButton-contained:active {
  box-shadow: 0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12);
}
.MuiButton-contained.Mui-disabled {
  color: rgba(0, 0, 0, 0.26);
  box-shadow: none;
  background-color: rgba(0, 0, 0, 0.12);
}
@media (hover: none) {
  .MuiButton-contained:hover {
    box-shadow: 0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);
    background-color: #e0e0e0;
  }
}
.MuiButton-contained:hover.Mui-disabled {
  background-color: rgba(0, 0, 0, 0.12);
}
.MuiButton-containedPrimary {
  color: #fff;
  background-color: #3f51b5;
}
.MuiButton-containedPrimary:hover {
  background-color: #303f9f;
}
@media (hover: none) {
  .MuiButton-containedPrimary:hover {
    background-color: #3f51b5;
  }
}
.MuiButton-containedSecondary {
  color: #fff;
  background-color: #f50057;
}
.MuiButton-containedSecondary:hover {
  background-color: #c51162;
}
@media (hover: none) {
  .MuiButton-containedSecondary:hover {
    background-color: #f50057;
  }
}
.MuiButton-disableElevation {
  box-shadow: none;
}
.MuiButton-disableElevation:hover {
  box-shadow: none;
}
.MuiButton-disableElevation.Mui-focusVisible {
  box-shadow: none;
}
.MuiButton-disableElevation:active {
  box-shadow: none;
}
.MuiButton-disableElevation.Mui-disabled {
  box-shadow: none;
}
.MuiButton-colorInherit {
  color: inherit;
  border-color: currentColor;
}
.MuiButton-textSizeSmall {
  padding: 4px 5px;
  font-size: 0.8125rem;
}
.MuiButton-textSizeLarge {
  padding: 8px 11px;
  font-size: 0.9375rem;
}
.MuiButton-outlinedSizeSmall {
  padding: 3px 9px;
  font-size: 0.8125rem;
}
.MuiButton-outlinedSizeLarge {
  padding: 7px 21px;
  font-size: 0.9375rem;
}
.MuiButton-containedSizeSmall {
  padding: 4px 10px;
  font-size: 0.8125rem;
}
.MuiButton-containedSizeLarge {
  padding: 8px 22px;
  font-size: 0.9375rem;
}
.MuiButton-fullWidth {
  width: 100%;
}
.MuiButton-startIcon {
  display: inherit;
  margin-left: -4px;
  margin-right: 8px;
}
.MuiButton-startIcon.MuiButton-iconSizeSmall {
  margin-left: -2px;
}
.MuiButton-endIcon {
  display: inherit;
  margin-left: 8px;
  margin-right: -4px;
}
.MuiButton-endIcon.MuiButton-iconSizeSmall {
  margin-right: -2px;
}
.MuiButton-iconSizeSmall &gt; *:first-child {
  font-size: 18px;
}
.MuiButton-iconSizeMedium &gt; *:first-child {
  font-size: 20px;
}
.MuiButton-iconSizeLarge &gt; *:first-child {
  font-size: 22px;
}

                  </style>
                  <style
                    data-emotion="css"
                    data-s=""
                  >
                    
                    .css-1h8td7x-MuiDialog-root{}
                  </style>
                  <style
                    data-emotion="css"
                    data-s=""
                  >
                    
                    @media print{.css-1h8td7x-MuiDialog-root{position:absolute!important;}}
                  </style>
                </head>,
                "ctr": 2,
                "insertionPoint": undefined,
                "isSpeedy": false,
                "key": "css",
                "nonce": undefined,
                "prepend": undefined,
                "tags": Array [
                  <style
                    data-emotion="css"
                    data-s=""
                  >
                    
                    .css-1h8td7x-MuiDialog-root{}
                  </style>,
                  <style
                    data-emotion="css"
                    data-s=""
                  >
                    
                    @media print{.css-1h8td7x-MuiDialog-root{position:absolute!important;}}
                  </style>,
                ],
              },
            }
          }
          isStringTag={false}
          serialized={
            Object {
              "map": undefined,
              "name": "1h8td7x-MuiDialog-root",
              "next": undefined,
              "styles": "label:MuiDialog-root;@media print{position:absolute !important;}",
              "toString": [Function],
            }
          }
        />
        <ForwardRef(Modal)
          BackdropComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "__emotion_base": Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "children": [Function],
                  "className": [Function],
                  "classes": [Function],
                  "components": [Function],
                  "componentsProps": [Function],
                  "invisible": [Function],
                  "open": [Function],
                  "sx": [Function],
                  "transitionDuration": [Function],
                },
                "render": [Function],
              },
              "__emotion_forwardProp": [Function],
              "__emotion_real": [Circular],
              "__emotion_styles": Array [
                "label:MuiDialog-backdrop;",
                Object {
                  "zIndex": -1,
                },
                [Function],
              ],
              "defaultProps": undefined,
              "render": [Function],
              "withComponent": [Function],
            }
          }
          BackdropProps={
            Object {
              "as": undefined,
              "transitionDuration": Object {
                "enter": 225,
                "exit": 195,
              },
            }
          }
          className="MuiDialog-root supplierRack css-1h8td7x-MuiDialog-root"
          closeAfterTransition={true}
          disableEscapeKeyDown={true}
          onClick={[Function]}
          onClose={[Function]}
          open={false}
        >
          <ForwardRef(ModalUnstyled)
            BackdropComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "__emotion_base": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "propTypes": Object {
                    "children": [Function],
                    "className": [Function],
                    "classes": [Function],
                    "components": [Function],
                    "componentsProps": [Function],
                    "invisible": [Function],
                    "open": [Function],
                    "sx": [Function],
                    "transitionDuration": [Function],
                  },
                  "render": [Function],
                },
                "__emotion_forwardProp": [Function],
                "__emotion_real": [Circular],
                "__emotion_styles": Array [
                  "label:MuiDialog-backdrop;",
                  Object {
                    "zIndex": -1,
                  },
                  [Function],
                ],
                "defaultProps": undefined,
                "render": [Function],
                "withComponent": [Function],
              }
            }
            BackdropProps={
              Object {
                "as": undefined,
                "transitionDuration": Object {
                  "enter": 225,
                  "exit": 195,
                },
              }
            }
            className="MuiDialog-root supplierRack css-1h8td7x-MuiDialog-root"
            closeAfterTransition={true}
            components={
              Object {
                "Root": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "__emotion_base": "div",
                  "__emotion_forwardProp": [Function],
                  "__emotion_real": [Circular],
                  "__emotion_styles": Array [
                    "label:MuiModal-root;",
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "defaultProps": undefined,
                  "render": [Function],
                  "withComponent": [Function],
                },
              }
            }
            componentsProps={
              Object {
                "root": Object {
                  "ownerState": Object {},
                },
              }
            }
            disableAutoFocus={false}
            disableEnforceFocus={false}
            disableEscapeKeyDown={true}
            disablePortal={false}
            disableRestoreFocus={false}
            disableScrollLock={false}
            hideBackdrop={false}
            keepMounted={false}
            onClick={[Function]}
            onClose={[Function]}
            onTransitionEnter={[Function]}
            onTransitionExited={[Function]}
            open={false}
          />
        </ForwardRef(Modal)>
      </MuiDialogRoot>
    </ForwardRef(Dialog)>
  </SupplierRack>
   
</QueryClientProvider>
`;
